#!/bin/bash
set -o pipefail
shopt -qs extglob

: ${ONBAG_LINE_WHAT=line}
: ${ONBAG_OUTPUT_MARKER='{}'}
outputMarker="$ONBAG_OUTPUT_MARKER"
readonly EXIT_SIGNAL=125
readonly NOOP_SIGNAL=124

hasProgressNotification=; type -t progressNotification >/dev/null && hasProgressNotification=t

isOnChange=
if [ "$1" = --onchange ]; then
    shift
    isOnChange=t
    parentScriptPid="$1"; shift
    typeset -a runWithPromptPromptArgs=()
    if [ "$1" = --consumed-exit-status-file ]; then
	shift
	consumedExitStatusFilespec="$1"; shift
	if [ -r "$consumedExitStatusFilespec" ]; then
	    <"$consumedExitStatusFilespec" IFS=$'\n' read -r exitStatus
	    rm --force -- "$consumedExitStatusFilespec" 2>/dev/null
	    runWithPromptPromptArgs=(--initial-status "${exitStatus:-0}")
	fi
    fi
else
    if [ -z "$PGID" ]; then # No parent script has become the process group leader yet.
	pgid=$(($(ps -o pgid= -p "$$")))	# By defining this, we'll be killing subshell processes of this process group when we're done or interrupted. Any children with the same ambition will defer to us.
	if [ $$ -eq $pgid ]; then
	    export PGID=$pgid   # We are (already / after setsid) in our own process group, announce our leadership to any children, so that they don't become leaders themselves and thereby decouple themselves from our lifetime control.
	else
	    exec setsid --wait "${BASH_SOURCE[0]}" "$@" # Use setsid instead of set -m (...) to avoid having another subshell in between.
	fi
    fi
fi


printShortUsage()
{
    printf 'Usage: %q %s%s %s\n' "$(basename "$1")" '[-x|--transactional] [--ignore-existing] [-n|--count N|-1] [-i|--interval NUMBER[SUFFIX] [-l|--max-lines N] [-S|--stop-on-empty] [-s|--stop-on PATTERN] [-t|--stop-after TIMEOUT[SUFFIX]] [--print]' "${hasProgressNotification:+ [--progress SINK]}" "[[--bare [--exit-on-success|--exit-on-failure|--exit-on NUM|--exit-unless NUM]|[--no-capture-output] $(runWithPrompt --get-short-usage 2>/dev/null)] [--prefix-command PC] [--prefix-command-command PCC] [--parallel [--parallel-limit N] [--rate-limit NUMBER[SUFFIX]]] [--prepend-on-failure|--prepend-on NUM|--prepend-unless NUM [--prepend-before-each TEXT] [--prepend-after-each TEXT] [--prepend-before-once TEXT] [--prepend-after-once TEXT]] [--append-on-failure|--append-on NUM|--append-unless NUM [--append-before-each TEXT] [--append-after-each TEXT] [--append-before-once TEXT] [--append-after-once TEXT]] -c|--command "COMMANDLINE" | [--] SIMPLECOMMAND [...]] [-?|-h|--help]"
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 '\nTry %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Observe a special file for added output, consume it from the start (FIFO-style)
in order to perform an action with it.
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    echo
    cat <<HELPTEXT
    --transactional|-x	Lock the special file during the access so that writes
			are serialized and concurrent reads can only happen
			while no write is under way. Pass this to ensure
			consistency in case there could ever be contention over
			the file.
    --ignore-existing	Do not immediately react on existing lines; only start
			consuming once an actual external change has been
			observed / only consume existing line(s) each INTERVAL.
    --print		Print the added output.${hasProgressNotification:+
    --progress SINK	Report the current (first) line through one of the SINKs
			of the progressNotification command.}
    --bare		Do not print a status line before and after launching
			the COMMAND.
HELPTEXT
    runWithPrompt --get-long-usage 2>/dev/null
    cat <<HELPTEXT
    --no-capture-output	By default, no status line is printed if the COMMAND did
			not have any output, and failing parallel invocations
			without output are ignored altogether. This option turns
			this off and will print status lines (and consider
			parallel failures) even without output. Some
			(interactive) commands (like Vim) do not like having
			their output not connected to the terminal, and can be
			made to cooperate by passing this option.
    --command|-c CMD	Execute CMD as a command-line. The string $outputMarker is
			replaced by the added output. Multiple lines (via
			--max-lines) are passed as individual arguments.
			CMD can abort further observations by returning ${EXIT_SIGNAL}, and
			make the current line not be counted by returning ${NOOP_SIGNAL}.
    --prefix-command PC	Put PC (directly) in front of the COMMAND(s) given by
			(subsequent, but not previous) --command or
			SIMPLECOMMAND. This can be used to inject a wrapper
			command.
    --prefix-command-command PCC
			Put PCC (directly) in front of the COMMAND(s) given by
			(subsequent, but not previous) --command, and pass
			COMMAND via --command COMMAND to PCC. This can be used
			to inject a wrapper command that itself takes a
			--command argument.
			This is different than --prefix-command when COMMAND
			itself is a pipeline; here, the entire pipeline will be
			passed to PCC; whereas PC would only cover the first
			command inside the pipeline.
    --interval|-i INTERVAL[SUFFIX]
			Wait for INTERVAL seconds between observations of the
			special file. By default, any change is observed
			immediately.
    --max-lines|-l N	A maximum of N (default: 1) lines are consumed and
			passed to COMMAND at once (if available). The entire set
			of lines counts as one change (for --count).
    --stop-on-empty|-S	Stop once the special file becomes empty because of
			observed changes / is deleted. The consumption of
			existing line(s) alone does not trigger this; at least
			one change needs to have been observed.
    --stop-on|-s PATTERN
			Stop observing changes if the output (individual lines)
			matches PATTERN. When multiple lines are consumed, lines
			before the match are still processed, and lines after
			the match are put back into the special file. PATTERN is
			a Bash-style extended regular expression.
    --stop-after|-t TIMEOUT[SUFFIX]
			Stop observing if no lines have been added for
			TIMEOUT[SUFFIX]. This includes the time spent processing
			any existing line(s).
    --parallel		Instead of waiting for one COMMAND to finish before
			executing the next, run each one the moment the change
			is triggered. The default is sequential invocation.
    --parallel-limit N	Wait when more than N parallel jobs are already running
			to avoid triggering too many simultaneous executions.
    --rate-limit NUMBER[SUFFIX]
			Sleep for NUMBER[SUFFIX] before triggering the next
			parallel execution of COMMAND. This can avoid triggering
			too many simultaneous executions.
    --count|-n N	Stop observing changes after N changes. Output that is
			retried is not counted.
    -1			Stop observing after the first change. Output that is
			retried is not counted.
    --prepend-on-failure
			Return the output to the beginning of the special file
			(so it will be considered right next again!) if COMMAND
			is unsuccessful.
    --prepend-on NUM	Return the output to the beginning of the special file
			if COMMAND exits with NUM.
    --prepend-unless NUM
			Return the output to the beginning of the special file
			if COMMAND does not exit with NUM.
    --prepend-before-each TEXT
			Put TEXT before the prepended output.
    --prepend-after-each TEXT
			Put TEXT after the prepended output.
    --prepend-before-once TEXT
			Put TEXT before the prepended output on the first
			prepending, but not thereafter.
    --prepend-after-once TEXT
			Put TEXT after the prepended output on the first
			prepending, but not thereafter.
    --append-on-failure	Put back the output to the end of the special file if
			COMMAND is unsuccessful.
    --append-on NUM	Put back the output to the end of the special file if
			COMMAND exits with NUM.
    --append-unless NUM	Put back the output to the end of the special file if
			COMMAND does not exit with NUM.
    --append-before-each TEXT
			Put TEXT before the appended output.
    --append-after-each TEXT
			Put TEXT after the appended output.
    --append-before-once TEXT
			Put TEXT before the appended output on the first
			appending, but not thereafter.
    --append-after-once TEXT
			Put TEXT after the appended output on the first
			appending, but not thereafter.
SUFFIX may be 's' for seconds (the default), 'm' for minutes, 'h' for hours or
'd' for days.

EXIT STATUS:
    0	End of observation reached due to specified condition(s).
    *   any exit status from the last COMMAND (not with immediate observation
	which always returns 0)
    2	Bad invocation, wrong or missing command-line arguments.
Example:
HELPTEXT
    printf '%q %s\n' "$(basename "$1")" '--bare -l 5 -s STOP --append-on-failure -- wget {}'
}

timeToSeconds()
{
    case "$1" in
	+([0-9])?(s))   time="${1%s}";;
	+([0-9])m)	time=$((${1%m} * 60));;
	+([0-9])h)	time=$((${1%h} * 3600));;
	+([0-9])d)	time=$((${1%d} * 86400));;
	*)		printf >&2 "ERROR: Illegal ${2:-timeout}: %s\\n" "$1"; exit 2;;
    esac
    printf %s "$time"
}

typeset -a allArgs=("$@")
typeset -a bagArgs=()
isConsumeExisting=t
isParallel=
count=
interval=
maxLines=1
isStopOnEmpty=
stopPattern=
stopAfter=
parallelLimit=
rateLimit=
exitOn=
exitComparison=-eq
prependOn=
prependComparison=-eq
prependBeforeEachText=
prependAfterEachText=
prependBeforeOnceText=
prependAfterOnceText=
appendBeforeEachText=
appendAfterEachText=
appendBeforeOnceText=
appendAfterOnceText=
appendOn=
appendComparison=-eq
typeset -a commands=()
prefixCommand=
prefixCommandCommand=
isPrint=
progressSink=
isBare=
isCaptureOutput=t
typeset -a onchangeArgs=()
typeset -a onchangeExitOnArg=()
typeset -a runWithPromptArgs=()
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;
	--transactional|-x)
			bagArgs+=("$1"); shift;;
	--ignore-existing)
			shift; isConsumeExisting=;;
	--count|-n)	shift; count="$1"; shift;;
	-1)		shift; count=1;;
	--exit-on-success)	shift; exitOn=0; exitComparison=-eq; onchangeExitOnArg=(--exit-on $EXIT_SIGNAL);;
	--exit-on-failure)	shift; exitOn=0; exitComparison=-ne; onchangeExitOnArg=(--exit-on $EXIT_SIGNAL);;
	--exit-on)		shift; exitOn="$1"; shift; exitComparison=-eq; onchangeExitOnArg=(--exit-on $EXIT_SIGNAL);;
	--exit-unless)		shift; exitOn="$1"; shift; exitComparison=-ne; onchangeExitOnArg=(--exit-on $EXIT_SIGNAL);;
	--prepend-on-failure)	shift; prependOn=0; prependComparison=-ne;;
	--prepend-on)		shift; prependOn="$1"; shift; prependComparison=-eq;;
	--prepend-unless)	shift; prependOn="$1"; shift; prependComparison=-ne;;
	--prepend-before-each)	shift; prependBeforeEachText="$1"; shift;;
	--prepend-after-each)	shift; prependAfterEachText="$1"; shift;;
	--prepend-before-once)	shift; prependBeforeOnceText="$1"; shift;;
	--prepend-after-once)	shift; prependAfterOnceText="$1"; shift;;
	--append-on-failure)	shift; appendOn=0; appendComparison=-ne;;
	--append-on)		shift; appendOn="$1"; shift; appendComparison=-eq;;
	--append-unless)	shift; appendOn="$1"; shift; appendComparison=-ne;;
	--append-before-each)	shift; appendBeforeEachText="$1"; shift;;
	--append-after-each)	shift; appendAfterEachText="$1"; shift;;
	--append-before-once)	shift; appendBeforeOnceText="$1"; shift;;
	--append-after-once)	shift; appendAfterOnceText="$1"; shift;;
	--parallel)	shift; isParallel=t;;
	--print)	shift; isPrint=t;;
	--progress)	shift; progressSink="$1"; shift;;
	--bare)		shift; isBare=t;;
	--trailing-prompt|--no-trailing-prompt|--no-output-no-prompt|--no-output-no-error|--no-success-no-count|--emulate-prompt|--worst-status)
			runWithPromptArgs+=("$1"); shift;;
	--initial-status|--no-count-on|--comment|--summarize-failed|--summarize-failed-separator)
			runWithPromptArgs+=("$1" "$2"); shift; shift;;
	--no-capture-output)
			shift; isCaptureOutput=;;
	--command|-c)	shift
			if [ -n "$prefixCommandCommand" ]; then
			    printf -v quotedCommand %q "$1"
			    printf -v escapedOutputMarker %q "$outputMarker" # %q escapes {}, we don't want that to have it interpolated later.
			    commands+=(${commands:+;} "${prefixCommandCommand} --command ${quotedCommand//"$escapedOutputMarker"/$outputMarker}")
			else
			    commands+=(${commands:+;} "${prefixCommand}$1")
			fi
			shift
			;;
	--prefix-command)
			shift; prefixCommand="$1"; shift;;
	--prefix-command-command)
			shift; prefixCommandCommand="$1"; shift;;
	--interval|-i)	shift; interval="$1"; shift;;
	--max-lines|-l)	shift; maxLines="$1"; shift;;
	--stop-on-empty|-S)
			shift; isStopOnEmpty=t; onchangeExitOnArg=(--exit-on $EXIT_SIGNAL);;
	--stop-on|-s)	shift; stopPattern="$1"; shift; onchangeExitOnArg=(--exit-on $EXIT_SIGNAL);;
	--stop-after|-t)
			onchangeArgs+=("$1" "$2"); shift
			stopAfter="$(timeToSeconds "$1")" || exit $?; shift
			;;
	--parallel-limit)
			shift; parallelLimit="$1"; shift;;
	--rate-limit)	shift; rateLimit="$1"; shift;;
	--)		shift; break;;
	-*)		{ echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		break;;
    esac
done
if [ $# -ne 0 ]; then
    # Combine --command and SIMPLECOMMAND; need to quote SIMPLECOMMAND to
    # undo the effects of eval.
    printf -v quotedSimpleCommand '%q ' "$@"
    printf -v escapedOutputMarker %q "$outputMarker"
    commands+=(${commands:+;} "${prefixCommand}${quotedSimpleCommand//"$escapedOutputMarker"/$outputMarker}")	# %q escapes {}, we don't want that to have it interpolated later.
fi
if [ ! "$isPrint" ] && [ ! "$count" ] && [ ${#commands[@]} -eq 0 ]; then
    echo 'ERROR: Need to pass either -1|-n|--count to count changes, --print to show added lines, or -c|--command to execute a command.'
    echo
    printUsage "$0"
    exit 2
fi >&2

# Don't show a prompt if nothing was printed; this would just waste screen
# space. Parallel execution is supposedly mostly used to control resource usage
# (e.g. just one instance via singleton or not too frequent actions via
# oncePer). In that case, ignore failing invocations altogether.
if [ ${#runWithPromptArgs[@]} -eq 0 ]; then
    [ "$isCaptureOutput" ] && runWithPromptArgs+=(--no-output-no-prompt)
    if [ "$isParallel" ]; then
	[ "$isCaptureOutput" ] && runWithPromptArgs+=(--no-output-no-error)
	runWithPromptArgs+=(--no-count-on 99)
    fi
fi

if [ "$isParallel" ] && [ -n "$prependBeforeOnceText" -o -n "$prependAfterOnceText" -o -n "$appendBeforeOnceText" -o -n "$appendAfterOnceText" ]; then
    markerGroup="onbag-$$"
    marker()
    {
	executionMarker --base-type runtime --group "${markerGroup:?}" "$@"
    }
    markerDrop()
    {
	marker --transactional --drop
    }
    checkOnceText()
    {
	local status=0
	marker --start-write-transaction "$BASHPID" || exit 3

	if marker --within-transaction "$BASHPID" --query onceTextDoneFlag; then
	    status=0 # Text already once prepended / appended.
	else
	    marker --within-transaction "$BASHPID" --update onceTextDoneFlag
	    status=1 # Text not yet prepended / appended.
	fi

	marker --end-transaction "$BASHPID" || exit 3
	return $status
    }

    # Clear any previous marker from a script run with the same PID. This
    # doesn't need to be transactional because the database is scoped to the PID
    # and we're still single-threaded here.
    marker --transactional --delete onceTextDoneFlag
else
    markerDrop() { :; }
fi


let observedChanges=0
SECONDS=0

waitForParallelLimit()
{
    until [ $(jobs -pr | wc -l) -lt ${parallelLimit:?} ]
    do
	sleep 0.1
    done
}

exitStatus=0
consumeExistingOutput()
{
    while :
    do
	runWithPromptPromptArgs[-1]=$exitStatus
	processBag
	local status=$?
	case $status in
	    $EXIT_SIGNAL)
		return 0;;
	    $NOOP_SIGNAL)
		[ -n "$stopAfter" ] && [ $SECONDS -ge $stopAfter ] && exit 0	# Consumption of existing output already has taken longer than TIMEOUT, bail out before even starting the observation.
		return 0    # No existing output, start the observation for changes.
		;;
	    *)
		let observedChanges+=1
		exitStatus=$status
		if [ "$count" ]; then
		    [ $observedChanges -ge $count ] && exit $exitStatus	# Consumption of existing output already exceeded the amount of [sets of] lines we should consume; bail out.
		fi
		;;
	esac
    done
}

pollForOutput()
{
    while :
    do
	[ "${interval:?}" = 0 ] || sleep "$interval"

	processBag
	local status=$?
	case $status in
	    $EXIT_SIGNAL)
		return 0;;
	    $NOOP_SIGNAL)
		[ -n "$stopAfter" ] && [ $SECONDS -ge $stopAfter ] && break
		;;
	    *)
		let observedChanges+=1
		if [ "$count" ]; then
		    [ $observedChanges -ge $count ] && return $status
		fi
		SECONDS=0
		runWithPromptPromptArgs=()
		;;
	esac
    done
}

processBag()
{
    typeset -a lines=()
    readarray -t lines < <(bag "${bagArgs[@]}" --pop --quiet --lines "$maxLines")
    if [ ${#lines[@]} -eq 0 ]; then
	# The bag is empty.
	if [ "$isStopOnEmpty" ]; then
	    return $EXIT_SIGNAL
	else
	    return $NOOP_SIGNAL
	fi
    fi

    executeTrigger "${lines[@]}"
}

executeTrigger()
{
    typeset -a lines=("$@")
    local status=0
    if [ -n "$stopPattern" ]; then
	local line lineCnt=0
	for line in "${lines[@]}"
	do
	    let lineCnt+=1
	    if [[ "$line" =~ $stopPattern ]]; then
		# Optimization when no --max-lines configured.
		[ ${#lines[@]} -eq 1 ] && return $EXIT_SIGNAL

		# Need to process any previous read lines, and put back lines
		# after the stop line. Do the latter first.
		[ $lineCnt -lt ${#lines[@]} ] && bag "${bagArgs[@]}" --prepend -- "${lines[@]}"
		if [ $lineCnt -eq 1 ]; then
		    return $EXIT_SIGNAL
		else
		    lines=("${lines[@]:0:$((lineCnt-1))}")
		    status=$EXIT_SIGNAL
		fi
		break
	    fi
	done
    fi


    if [ "$isPrint" ]; then
	joinBy ${ONBAG_PRINT_PREFIX:+--prefix "$ONBAG_PRINT_PREFIX"} ${ONBAG_PRINT_SUFFIX:+--suffix "$ONBAG_PRINT_SUFFIX"} -- "${ONBAG_PRINT_SEPARATOR-$'\n'}" "${lines[@]}"
    fi
    reportProgress "${lines[0]}"

    if [ ${#commands[@]} -ge 1 ]; then
	[ "$rateLimit" ] && sleep "$rateLimit"
	[ "$isParallel" ] && [ "$parallelLimit" ] && waitForParallelLimit
	eval 'triggerCommand "${lines[@]}"' ${isParallel:+&}
	status=$?
    fi

    return $status
}

triggerCommand()
{
    if [ "${commands[*]}" = "eval $outputMarker" ]; then
	# Optimization: Detect (non-bare) command from onbag-execute and drop
	# the eval so that the command looks natural in runWithPrompt.
	typeset -a expandedCommands=("$@")
    else
	local quotedLines; printf -v quotedLines '%q ' "$@"; quotedLines=${quotedLines% }
	typeset -a expandedCommands=("${commands[@]//"$outputMarker"/$quotedLines}")
    fi

    unset ONBAG_OUTPUT_MARKER
    if [ "$isBare" ]; then
	eval "${expandedCommands[@]}"
    else
	{ printf '%s ' "${expandedCommands[@]}"; printf '\n'; } | runWithPrompt "${runWithPromptPromptArgs[@]}" "${runWithPromptArgs[@]}" --comment "$observedChanges"
    fi
    local exitStatus=$?
    local result=$exitStatus

    if [ "$isParallel" ] && \
	[ -n "$prependBeforeOnceText" -o -n "$prependAfterOnceText" -o -n "$appendBeforeOnceText" -o -n "$appendAfterOnceText" ] && {
	    { [ "$prependOn" ] && [ $exitStatus $prependComparison $prependOn ]; } || \
		{ [ "$appendOn" ] && [ $exitStatus $appendComparison $appendOn ]; }
	} && checkOnceText; then
	# For parallel executions, we have to check an external flag so that the
	# prepend / append happens only once - the variable clearing won't
	# propagate to other parallel jobs, nor to the invoking main script. Use
	# a single flag for all variants, so that only one job gets the
	# semaphore and there's no mix-up from different parallel jobs.
	prependAfterOnceText=''
	prependBeforeOnceText=''
	appendBeforeOnceText=''
	appendAfterOnceText=''
    fi
    if [ "$prependOn" ] && [ $exitStatus $prependComparison $prependOn ]; then
	[ -n "$prependAfterEachText" ] && bag "${bagArgs[@]}" --prepend -- "$prependAfterEachText"
	[ -n "$prependAfterOnceText" ] && bag "${bagArgs[@]}" --prepend -- "$prependAfterOnceText" && prependAfterOnceText=''
	printf '%s\n' "$@" | bag "${bagArgs[@]}" --prepend
	[ -n "$prependBeforeEachText" ] && bag "${bagArgs[@]}" --prepend -- "$prependBeforeEachText"
	[ -n "$prependBeforeOnceText" ] && bag "${bagArgs[@]}" --prepend -- "$prependBeforeOnceText" && prependBeforeOnceText=''
	result=$NOOP_SIGNAL
    fi
    if [ "$appendOn" ] && [ $exitStatus $appendComparison $appendOn ]; then
	[ -n "$appendBeforeEachText" ] && bag "${bagArgs[@]}" --append -- "$appendBeforeEachText"
	[ -n "$appendBeforeOnceText" ] && bag "${bagArgs[@]}" --append -- "$appendBeforeOnceText" && appendBeforeOnceText=''
	printf '%s\n' "$@" | bag "${bagArgs[@]}" --append
	[ -n "$appendAfterEachText" ] && bag "${bagArgs[@]}" --append -- "$appendAfterEachText"
	[ -n "$appendAfterOnceText" ] && bag "${bagArgs[@]}" --append -- "$appendAfterOnceText" && appendAfterOnceText=''
	result=$NOOP_SIGNAL
    fi
    if [ "$exitOn" ] && [ $exitStatus $exitComparison $exitOn ]; then
	[ "$isParallel" ] && kill -SIGUSR1 $$
	result=$EXIT_SIGNAL
    fi
    return $result
}

database()
{
    miniDB --base-type runtime --schema 'PID COUNT' --table onbag "$@"
}

# With parallel execution, we need a signal for stopping; a variable won't do.
# Each COMMAND is started as a separate job, and its exit status (that indicates
# whether we should stop) is not observed by the main script. Instead, that job
# sends SIGUSR1 to the main script, which waits for any other running jobs, and
# then terminates with $EXIT_SIGNAL so that the onchange loop around will exit,
# too.
shutdown()
{
    wait    # Wait for running jobs to finish; this avoids the "Terminated" message and exit status 143.
    exit $EXIT_SIGNAL
}
trap "shutdown" SIGUSR1


if [ "$hasProgressNotification" ] && [ -n "$progressSink" ]; then
    [ "$isOnChange" ] || exec 3> >(progressNotification --to "$progressSink" ${ONBAG_LINE_WHAT:+--prepend-count "${ONBAG_LINE_WHAT}"} 2>/dev/null)

    reportProgress()
    {
	trap 'reportProgress() { :; }; trap PIPE' PIPE
	printf '%s\n' "$*" >&3 2>/dev/null  # Silence "printf: write error: Broken pipe"
    }
else
    reportProgress() { :; }
fi

if [ "$isOnChange" ]; then
    status=0
    while [ $status -ne $NOOP_SIGNAL -a $status -ne $EXIT_SIGNAL ]
    do
	[ -n "$count" ] && observedChanges="$(database --query $parentScriptPid --columns COUNT)" || observedChanges=''

	processBag
	status=$?

	if [ -n "$count" ] && [ $status -ne $NOOP_SIGNAL ] && [ -n "$observedChanges" ]; then
	    let observedChanges+=1
	    [ $observedChanges -ge $count ] && { wait; exit $EXIT_SIGNAL; }
	    database --update "$parentScriptPid	$observedChanges"
	fi
    done

    wait; exit $status
fi


if [ -n "$pgid" ]; then
    trap "markerDrop; kill -- -$pgid" EXIT  # If we're the leader, kill subshell processes when the script exits.
else
    trap "markerDrop; jobs -p | xargs --no-run-if-empty kill --" EXIT  # Someone else is the leader; killing remaining jobs is all we can do here.
fi

typeset -a runWithPromptPromptArgs=()
if [ "$isConsumeExisting" ]; then
    runWithPromptPromptArgs=(--no-trailing-prompt --initial-status 0)
    consumeExistingOutput
    runWithPromptPromptArgs=(--initial-status ${exitStatus:-0})
fi

if [ -n "$interval" ]; then
    pollForOutput
else
    if [ -n "$count" ]; then
	# We cannot let onchange directly count the invocations via --count, as
	# the popping off of the output is another change; doubling the counts
	# might work with inotifywait, but not with the much more granular
	# polling.

	# Therefore, we need another external store to persist the counter.
	database --update "$$	${observedChanges:?}"
	[ "${DEBUG:-}" ] || trap 'database --delete $$ 2>/dev/null' EXIT

	# As with the --stop-on options, the end of observation is signaled by
	# the recursive invocation through $EXIT_SIGNAL.
	onchangeExitOnArg=(--exit-on $EXIT_SIGNAL)
    fi

    typeset -a exitStatusContinuationArgs=()
    if [ ${exitStatus:-0} -gt 0 ]; then
	# Passing the (non-zero) exit status from the last consumed line's
	# COMMAND is difficult, because onchange will periodically invoke
	# ourselves recursively, so we need to use a persisted file that we
	# clear after the first invocation.
	TMPFILE="$(mktemp --tmpdir "$(basename -- "$0")-XXXXXX" 2>/dev/null || echo "${TMPDIR:-/tmp}/$(basename -- "$0").$$$RANDOM")"
	printf '%d\n' "$exitStatus" > "$TMPFILE" && \
	    exitStatusContinuationArgs=(--consumed-exit-status-file "$TMPFILE")
    fi

    ONCHANGE_FILE_MARKER='' onchange "${onchangeArgs[@]}" "${onchangeExitOnArg[@]}" --bare --exec "${BASH_SOURCE[0]}" --onchange $$ "${exitStatusContinuationArgs[@]}" "${allArgs[@]}" \; "${BAG:-"${HOME}/.bag"}"
fi
