#!/bin/bash

typeset -a usageOverrideArgs=(
    -e '/^ *\(--command|-c\|--prefix-command\)/b removeOptionLoop'
    -e '/^ *--bare/i\
    --no-single-bare	Do print a status line also by default when only a\
			single cmdline is consumed. (With --count or --all,\
			status lines are turned on automatically.) By default,\
			only the cmdline itself is printed.'
    -e '/^Usage:$/N' -e '/\(^\|\n\)Usage: */{ s/\(^\|\n\)\(Usage: *\)\?\([^ ]\+ \)*bag-consume /\1\2'"$(basename "$0")"' /; s/ -c|--command "COMMANDLINE" | \[--\] SIMPLECOMMAND \[\.\.\.\]// }'
)
printUsage()
{
    bag-consume --doesNotExist 2>&1 | sed \
	-e '/^ERROR: Unknown option "--doesNotExist"!/{ N; s/\n$//; D; }' \
	"${usageOverrideArgs[@]}" \
	-e "/Try bag-consume --help for more information./s/bag-consume/$(basename "$1")/" \
	-e :removeOptionLoop
}
printLongUsage()
{
    bag-consume --help 2>&1 | sed \
	-e '1s#^.*$#Consume command-line(s) from a special file from the start (FIFO-style) and execute as a shell command.#' \
	-e '2b removeFirstParagraphLoop' \
	-e '/^ *--command|-c/,$s/ output/ cmdline/g' \
	"${usageOverrideArgs[@]}" \
	-e 's/COMMAND/cmdline/g' \
	-e 's/a line/the cmdline/g' \
	-e 's/ lines are/ cmdlines are/g' \
	-e 's/consumed lines/consumed cmdlines/g' \
	-e 's/the line/the cmdline/g' \
	-e 's/prepended line/prepended cmdline/g' \
	-e 's/appended line/appended cmdline/g' \
	-e '/^Example:$/N' -e '/\(^\|\n\)Example: */{ s/\(^\|\n\)\(Example: *\)\?bag-consume .*/\1\2'"$(basename "$1") --all --exit-on-failure --prepend-on-failure/ }" \
	-e b -e :removeFirstParagraphLoop -e '{ /\(^\|\n\)$/{ s/^\(.*\n\)\?//; b; }; N; b removeFirstParagraphLoop }' \
	-e b -e :removeOptionLoop -e '{ /\n *\(--command|-c\|--prefix-command\)[^\n]*$/{ N; b removeOptionLoop; }; /\n *--[^\n]*$\|\n[^ ]\|\n$/{ s/^\(.*\n\)\?//; b; }; N; b removeOptionLoop }'
}

isBarePrint=t
typeset -a bagConsumeArgs=()
bagConsumeCommand='eval {}'
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;

	--no-single-bare)
			shift; isBarePrint=;;

	--command|-c)	shift; printUsage "$0" >&2; exit 2;;
	--bare)		bagConsumeArgs+=("$1"); shift
			bagConsumeCommand="(${bagConsumeCommand})"    # Need to execute in a subshell so that "exit 42" can actually make bag-consume exit, as the bare command is directly interpreted within the script.
			;;
	--all|-a)	bagConsumeArgs+=("$1"); shift; isBarePrint=;;
	--count|-n)	bagConsumeArgs+=("$1" "$2"); shift; shift; isBarePrint=;;
	--)		bagConsumeArgs+=("$1"); shift; break;;
	*)		bagConsumeArgs+=("$1"); shift;;
    esac
done

sigil="${BAGEXECUTE_PRINT_SIGIL:-\$ }"; [ $EUID -eq 0 ] && sigil="${BAGEXECUTE_PRINT_SIGIL:-# }"
BAGCONSUME_PRINT_PREFIX="${BAGEXECUTE_PRINT_PREFIX-$sigil}" \
BAGCONSUME_PRINT_SUFFIX="${BAGEXECUTE_PRINT_SUFFIX}" \
BAGCONSUME_PRINT_SEPARATOR="${BAGEXECUTE_PRINT_SEPARATOR- }" \
    exec bag-consume ${isBarePrint:+--bare --print} \
	"${bagConsumeArgs[@]}" --command "$bagConsumeCommand"
