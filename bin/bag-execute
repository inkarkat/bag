#!/bin/bash

typeset -a usageOverrideArgs=(
    -e '/^ *\(--command|-c\|--prefix-command\)/b removeOptionLoop'
    -e '/^Usage:$/N' -e "/\(^\|\n\)Usage: */{ s/\(^\|\n\)\(Usage: *\)\?bag-consume /\1\2$(basename "$0") /; s/ -c|--command \"COMMANDLINE\" | \\[--\\] SIMPLECOMMAND \\[\\.\\.\\.\\]// }"
)
printUsage()
{
    bag-consume --doesNotExist 2>&1 | sed \
	-e '/^ERROR: Unknown option "--doesNotExist"!/{ N; s/\n$//; D; }' \
	"${usageOverrideArgs[@]}" \
	-e "/Try bag-consume --help for more information./s/bag-consume/$(basename "$1")/" \
	-e :removeOptionLoop
}
printLongUsage()
{
    bag-consume --help 2>&1 | sed \
	-e '1s#^.*$#Consume command-line(s) from a special file from the start (FIFO-style) and execute as a shell command.#' \
	-e '2b removeFirstParagraphLoop' \
	-e '/^ *--command|-c/,$s/ output/ cmdline/g' \
	"${usageOverrideArgs[@]}" \
	-e 's/COMMAND/cmdline/g' \
	-e 's/a line/the cmdline/g' \
	-e 's/ lines are/ cmdlines are/g' \
	-e 's/consumed lines/consumed cmdlines/g' \
	-e 's/the line/the cmdline/g' \
	-e 's/prepended line/prepended cmdline/g' \
	-e 's/appended line/appended cmdline/g' \
	-e '/^Example:$/N' -e "/\(^\|\n\)Example: */{ s/\(^\|\n\)\(Example: *\)\?bag-consume .*/\1\2$(basename "$1") --all --exit-on-failure --prepend-on-failure/ }" \
	-e b -e :removeFirstParagraphLoop -e '{ /\(^\|\n\)$/{ s/^\(.*\n\)\?//; b; }; N; b removeFirstParagraphLoop }' \
	-e b -e :removeOptionLoop -e '{ /\n *\(--command|-c\|--prefix-command\)[^\n]*$/{ N; b removeOptionLoop; }; /\n *--[^\n]*$\|^$/{ s/^\(.*\n\)\?//; b; }; N; b removeOptionLoop }'
}

typeset -a bagConsumeArgs=()
bagConsumeCommand='eval {}'
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;

	--command|-c)	shift; printUsage "$0" >&2; exit 2;;
	--bare)		bagConsumeArgs+=("$1"); shift
			bagConsumeCommand="(${bagConsumeCommand})"    # Need to execute in a subshell so that "exit 42" can actually make bag-consume exit, as the bare command is directly interpreted within the script.
			;;
	--)		bagConsumeArgs+=("$1"); shift; break;;
	*)		bagConsumeArgs+=("$1"); shift;;
    esac
done

BAGCONSUME_PRINT_PREFIX="${BAGEXECUTE_PRINT_PREFIX-\$ }" \
BAGCONSUME_PRINT_SUFFIX="${BAGEXECUTE_PRINT_SUFFIX}" \
BAGCONSUME_PRINT_SEPARATOR="${BAGEXECUTE_PRINT_SEPARATOR- }" \
    exec bag-consume "${bagConsumeArgs[@]}" --command "$bagConsumeCommand"
