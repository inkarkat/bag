#!/bin/bash

typeset -a usageOverrideArgs=(
    -e '/^ *\(--command|-c\|--prefix-command\)/b removeOptionLoop'
    -e '/^ *--exit-on-success/i\
    --no-exit		Do not stop observing changes if that cmdline fails.\
			By default, a failing cmdline will stop the observation,\
			with the failing line being put back at the beginning of\
			the special file (for later retries).'
    -e '/^Usage:$/N' -e "/\(^\|\n\)Usage: */{ s/\(^\|\n\)\(Usage: *\)\?onbag /\1\2$(basename "$0") [--no-exit] /; s/ -c|--command \"COMMANDLINE\" | \\[--\\] SIMPLECOMMAND \\[\\.\\.\\.\\]// }"
)
printUsage()
{
    onbag --doesNotExist 2>&1 | sed \
	-e '/^ERROR: Unknown option "--doesNotExist"!/{ N; s/\n$//; D; }' \
	"${usageOverrideArgs[@]}" \
	-e "/Try onbag --help for more information./s/onbag/$(basename "$1")/" \
	-e :removeOptionLoop
}
printLongUsage()
{
    onbag --help 2>&1 | sed \
	-e '1s#^.*$#Observe a special file for added command-lines, execute each line from the start (FIFO-style) as a shell command.#' \
	-e '2b removeFirstParagraphLoop' \
	-e '/^ *--command|-c/,$s/ output/ cmdline/g' \
	"${usageOverrideArgs[@]}" \
	-e 's/Output/A cmdline/g' \
	-e 's/COMMAND/cmdline/g' \
	-e 's/ lines/ cmdlines/g' \
	-e 's/ passed to cmdline/ executed/g' \
	-e 's/ (individual cmdlines)//g' \
	-e '/^Example:$/N' -e "/\(^\|\n\)Example: */{ s/\(^\|\n\)\(Example: *\)\?onbag .*/\1\2$(basename "$1") / }" \
	-e b -e :removeFirstParagraphLoop -e '{ /\(^\|\n\)$/{ s/^\(.*\n\)\?//; b; }; N; b removeFirstParagraphLoop }' \
	-e b -e :removeOptionLoop -e '{ /\n *\(--command|-c\|--prefix-command\)[^\n]*$/{ N; b removeOptionLoop; }; /\n *--[^\n]*$\|^$/{ s/^\(.*\n\)\?//; b; }; N; b removeOptionLoop }'
}

isExit=t
isPreOrAppend=t
typeset -a onbagExitArgs=()
typeset -a onbagPreOrAppendArgs=()
typeset -a onbagArgs=()
onbagCommand='eval {}'
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;

	--no-exit)	shift; isExit=;;

	--command|-c)	shift; printUsage "$0" >&2; exit 2;;
	--bare)		onbagArgs+=("$1"); shift
			onbagCommand="(${onbagCommand})"    # Need to execute in a subshell so that "exit 42" can actually make onbag exit, as the bare command is directly interpreted within the script.
			;;
	--exit-on-success|--exit-on-failure)
			onbagExitArgs+=("$1"); shift; isExit=;;
	--exit-on|--exit-unless)
			onbagExitArgs+=("$1" "$2"); shift; shift; isExit=;;
	--prepend-on-failure|--append-on-failure)
			onbagPreOrAppendArgs+=("$1"); shift; isPreOrAppend=;;
	--prepend-on|--prepend-unless|--append-on|--append-unless)
			onbagPreOrAppendArgs+=("$1" "$2"); shift; shift; isPreOrAppend=;;
	--)		onbagArgs+=("$1"); shift; break;;
	*)		onbagArgs+=("$1"); shift;;
    esac
done

sigil="${ONBAGEXECUTE_PRINT_SIGIL:-\$ }"; [ $EUID -eq 0 ] && sigil="${ONBAGEXECUTE_PRINT_SIGIL:-# }"
ONBAG_PRINT_PREFIX="${ONBAGEXECUTE_PRINT_PREFIX-$sigil}" \
ONBAG_PRINT_SUFFIX="${ONBAGEXECUTE_PRINT_SUFFIX}" \
ONBAG_PRINT_SEPARATOR="${ONBAGEXECUTE_PRINT_SEPARATOR- }" \
    exec onbag ${isExit:+--exit-on-failure ${isPreOrAppend:+--prepend-on-failure}} \
	"${onbagExitArgs[@]}" "${onbagPreOrAppendArgs[@]}" "${onbagArgs[@]}" \
	--command "$onbagCommand"
