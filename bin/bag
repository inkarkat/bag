#!/bin/bash
shopt -qs extglob

: ${BAG:="${HOME}/.bag"}

printUsage()
{
    cat <<HELPTEXT
Collect output in a special file.
HELPTEXT
    echo
    printf 'Usage: %q %s\n' "$(basename "$1")" '[set|--prepend|add|-a|--append] [-t|--transactional] [--] OUTPUT [...]'
    printf 'Usage: echo OUTPUT | %q %s\n' "$(basename "$1")" '[set|--prepend|add|-a|--append] [-t|--transactional] [-]'

    echo
    cat <<HELPTEXT
Print collected output from the special file. (Each argument as a separate
line.)
HELPTEXT
    echo
    printf 'Usage: %q %s [| ...]\n' "$(basename "$1")" '[list|print|-p|--print [-<N>|-n|--lines N]] [-q|--quiet] [-t|--transactional]'

    echo
    cat <<HELPTEXT
Print and remove the first / N line(s) (or fewer) from the collected output from
the special file.
With --delete-empty, an emptied bag is removed from the file system as well.
HELPTEXT
    echo
    printf 'Usage: %q %s\n' "$(basename "$1")" 'pop|--pop [-<N>|-n|--lines N] [--delete-empty] [-q|--quiet] [-t|--transactional]'

    echo
    cat <<HELPTEXT
Print the first / N line(s) (or fewer) from the collected output from the
special file without removing it. Fails if there's no bag, the bag is empty or
contains less than N line(s).
HELPTEXT
    echo
    printf 'Usage: %q %s\n' "$(basename "$1")" 'peek|--peek [-<N>|-n|--lines N] [-q|--quiet] [-t|--transactional]'

    echo
    cat <<HELPTEXT
Remove all collected output from the special file.
HELPTEXT
    echo
    printf 'Usage: %q %s\n' "$(basename "$1")" 'delete|-d|--delete [-p|--print] [-t|--transactional] '
}

backupBag()
{
    local backupFilespec="${BAG}.bak"
    if [ -f "$BAG" ]; then
	cp --dereference --preserve=all --force --no-target-directory -- "$BAG" "$backupFilespec"
    else
	> "$backupFilespec"
    fi
}

typeset -a allArgs=("$@")
typeset -a popArgs=()
printLines=
isQuiet=
isPrepend=
isAppend=
isPrint=
isTransactional=
action=collect; [ -t 0 ] && action=print
case "$1" in
    list|print)	shift; isPrint=t;;
    peek)	shift; isPrint=t; action=peek;;
    pop)	shift; action=pop;;
    delete)	shift; action=delete;;
    set)	shift;;
    add)	shift; isAppend=t;;
    *)		bagAlias="bag-${1#--}"
		if which "$bagAlias" >/dev/null 2>&1; then
		    shift
		    exec "$bagAlias" "$@"
		fi
		;;
esac
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printUsage "$0"; exit 0;;
	--quiet|-q)	shift; isQuiet=t;;
	--print|-p)	shift; isPrint=t;;
	--peek)		shift; isPrint=t; action=peek;;
	--pop)		shift; action=pop;;
	--lines|-n)	popArgs+=("$1" "$2"); printLines="$2"; shift; shift;;
	-+([0-9]))	popArgs+=("$1"); printLines="${1#-}"; shift;;
	--delete-empty)	shift; popArgs+=(--delete);;
	--delete|-d)	shift; action=delete;;
	--prepend)	shift; isPrepend=t;;
	--append|-a)	shift; isAppend=t;;
	--transactional|-t)
			isTransactional=t; shift;;
	--)		shift; break;;
	-)		shift
			case "$action" in
			    collect)	;;
			    print)	action=collect;;
			    *)		printUsage "$0" >&2; exit 2;;
			esac
			if [ "$isPrint" ] || [ $# -gt 0 ]; then
			    printUsage "$0" >&2
			    exit 2
			fi
			;;
	-*)		{ echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		break;;
    esac
done
if [ "$isPrepend" ] && [ "$isAppend" ]; then
    printUsage "$0" >&2
fi
if [ "$isPrint" ]; then
    case "$action" in
	collect)    action=print;;
	peek|print|delete)
		    ;;
	*)	    printUsage "$0" >&2; exit 2;;
    esac
fi
if [ $# -gt 0 ]; then
    case "$action" in
	collect)    action=put;;
	print)	    if [ "$isPrint" ]; then
			printUsage "$0" >&2
			exit 2
		    else
			action=put
		    fi
		    ;;
	*)	    printUsage "$0" >&2
		    exit 2
		    ;;
    esac
fi

if [ "$isTransactional" ]; then
    typeset -a withTransactionArgs=()
    [ "$action" = print ] && withTransactionArgs+=(--read-only)
    readonly scriptFilespec="${BASH_SOURCE[0]}"

    exec withTransaction \
	--drop-argument --transactional --drop-argument -t "${withTransactionArgs[@]}" \
	--transacted-file "$BAG" \
	-- "$scriptFilespec" "${allArgs[@]}"
fi

assertExistingBag()
{
    if [ ! -f "$BAG" ]; then
	[ "$isQuiet" ] || printf >&2 '%s does not exist\n' "$BAG"
	exit 1
    fi
}
assertNoPrintLines()
{
    if [ -n "$printLines" ]; then
	printUsage "$0" >&2
	exit 2
    fi
}

case "$action" in
    print)
	assertExistingBag
	if [ -n "$printLines" ]; then
	    exec head -n "$printLines" -- "$BAG"
	else
	    exec cat -- "$BAG"
	fi
	;;
    peek)
	assertExistingBag
	exec 3>&1
	: ${printLines:=1}
	actualLines=$(head -n "$printLines" -- "$BAG" | tee /dev/fd/3 | wc -l)
	[ $actualLines -ge $printLines ]
	;;
    pop)
	assertExistingBag
	backupBag
	exec pop "${popArgs[@]}" -- "$BAG"
	;;
    delete)
	assertNoPrintLines
	[ "$isPrint" ] && [ -f "$BAG" ] && cat -- "$BAG"
	backupBag
	exec rm --force -- "$BAG"
	;;
    put)
	assertNoPrintLines
	backupBag
	if [ "$isPrepend" ]; then
	    prepend "$@" "$BAG"
	else
	    eval 'printf %s\\n "$@"' ">${isAppend:+>}" '"$BAG"'
	fi
	;;
    collect)
	assertNoPrintLines
	backupBag
	if [ "$isPrepend" ]; then
	    readarray -t lines
	    if [ ${#lines[@]} -gt 0 ]; then
		prepend "${lines[@]}" "$BAG" || exit $?
	    fi
	else
	    if [ ! "$isAppend" ]; then
		> "$BAG" || exit $?
	    fi

	    isEOL=t
	    while IFS=$'\n' read -r line || { isEOL=; [ -n "$line" ]; }
	    do
		printf %s${isEOL:+\\n} "$line" >> "$BAG"
	    done
	fi
	;;
    *)
	printf >&2 'ASSERT: Invalid action: %s\n' "$action"; exit 3
	;;
esac
