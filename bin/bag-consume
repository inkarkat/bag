#!/bin/bash
set -o pipefail
shopt -qs extglob

: ${BAGCONSUME_OUTPUT_MARKER='{}'}
outputMarker="$BAGCONSUME_OUTPUT_MARKER"
readonly EXIT_SIGNAL=125
readonly NOOP_SIGNAL=124

if [ -z "$PGID" ]; then # No parent script has become the process group leader yet.
    pgid=$(($(ps -o pgid= -p "$$")))	# By defining this, we'll be killing subshell processes of this process group when we're done or interrupted. Any children with the same ambition will defer to us.
    if [ $$ -eq $pgid ]; then
	export PGID=$pgid   # We are (already / after setsid) in our own process group, announce our leadership to any children, so that they don't become leaders themselves and thereby decouple themselves from our lifetime control.
    else
	exec setsid --wait "${BASH_SOURCE[0]}" "$@" # Use setsid instead of set -m (...) to avoid having another subshell in between.
    fi
fi


printShortUsage()
{
    printf 'Usage: %q %s\n' "$(basename "$1")" '[-t|--transactional] [--worst-status] [-a|--all|-n|--count N] [-l|--max-lines N] [-s|--stop-on PATTERN] [--print] [[--bare|[--no-capture-output] [--initial-status NUM] [--trailing-prompt|--no-trailing-prompt] [--no-output-no-prompt] [--no-output-no-error] [--emulate-prompt]] [--prefix-command PC] [--prefix-command-command PCC] [--parallel [--rate-limit NUMBER[SUFFIX]]] [--exit-on-success|--exit-on-failure|--exit-on NUM] [--prepend-on-failure|--prepend-on NUM|--prepend-unless NUM [--prepend-before TEXT|--prepend-after TEXT]] [--append-on-failure|--append-on NUM|--append-unless NUM [--append-before TEXT|--append-after TEXT]] -c|--command "COMMANDLINE" | [--] SIMPLECOMMAND [...]] [-?|-h|--help]'
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 '\nTry %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Consume line(s) from a special file from the start (FIFO-style) in order to
perform an action with them.
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    echo
    cat <<HELPTEXT
    --transactional|-t	Lock the special file during the access so that writes
			are serialized and concurrent reads can only happen
			while no write is under way. Pass this to ensure
			consistency in case there could ever be contention over
			the file.
    --print		Print the consumed lines.
    --bare		Do not print a status line before and after launching
			the COMMAND.
    --initial-status NUM    Customizations of the prompt emulation around
    --trailing-prompt	    COMMAND; cp. runWithPrompt
    --no-trailing-prompt
    --no-output-no-prompt
    --no-output-no-error
    --emulate-prompt
    --worst-status	Return the highest exit status of all COMMANDs instead
			of the exit status of the last COMMAND.
    --no-capture-output	By default, no status line is printed if the COMMAND did
			not have any output, and failing parallel invocations
			without output are ignored altogether. This option turns
			this off and will print status lines (and consider
			parallel failures) even without output. Some
			(interactive) commands (like Vim) do not like having
			their output not connected to the terminal, and can be
			made to cooperate by passing this option.
    --command|-c CMD	Execute CMD as a command-line. The string $outputMarker is
			replaced by the added output. Multiple lines (via
			--max-lines) are passed as individual arguments.
			CMD can abort further observations by returning ${EXIT_SIGNAL}, and
			make the current line not be counted by returning ${NOOP_SIGNAL}.
    --prefix-command PC	Put PC (directly) in front of the COMMAND(s) given by
			(subsequent, but not previous) --command or
			SIMPLECOMMAND. This can be used to inject a wrapper
			command.
    --prefix-command-command PCC
			Put PCC (directly) in front of the COMMAND(s) given by
			(subsequent, but not previous) --command, and pass
			COMMAND via --command COMMAND to PCC. This can be used
			to inject a wrapper command that itself takes a
			--command argument.
			This is different than --prefix-command when COMMAND
			itself is a pipeline; here, the entire pipeline will be
			passed to PCC; whereas PC would only cover the first
			command inside the pipeline.
    --count|-n N	A maximum of N (default: 1) lines are consumed and
			executed.
    --all|-a		All available lines are consumed and executed.
    --max-lines|-l N	A maximum of N (default: 1) lines are consumed and
			passed to COMMAND at once (if available). The entire set
			of lines counts as one change (for --count).
    --stop-on|-s PATTERN
			Stop execution if a line matches PATTERN.
			PATTERN is a Bash-style extended regular expression.
    --parallel		Instead of waiting for one COMMAND to finish before
			executing the next, run each one the moment the change
			is triggered. The default is sequential invocation.
    --rate-limit NUMBER[SUFFIX]
			Sleep for NUMBER[SUFFIX] before triggering the next
			parallel execution of COMMAND. This can avoid triggering
			too many simultaneous executions.
    --exit-on-success	Stop execution if COMMAND is successful.
    --exit-on-failure	Stop execution if COMMAND is unsuccessful.
    --exit-on NUM	Stop execution if COMMAND exits with NUM.
    --exit-unless NUM	Stop execution if COMMAND does not exit with NUM.
    --prepend-on-failure
			Return the line to the beginning of the special file
			(so it will be considered right next again!) if COMMAND
			is unsuccessful.
    --prepend-on NUM	Return the line to the beginning of the special file
			if COMMAND exits with NUM.
    --prepend-unless NUM
			Return the line to the beginning of the special file
			if COMMAND does not exit with NUM.
    --prepend-before TEXT
			Put TEXT before the prepended line.
    --prepend-after TEXT
			Put TEXT after the prepended line.
    --append-on-failure	Put back the line to the end of the special file if
			COMMAND is unsuccessful.
    --append-on NUM	Put back the line to the end of the special file if
			COMMAND exits with NUM.
    --append-unless NUM	Put back the line to the end of the special file if
			COMMAND does not exit with NUM.
    --append-before TEXT
			Put TEXT before the appended line.
    --append-after TEXT
			Put TEXT after the appended line.
SUFFIX may be 's' for seconds (the default), 'm' for minutes, 'h' for hours or
'd' for days.

EXIT STATUS:
    *   any exit status from the last COMMAND
    2	Bad invocation, wrong or missing command-line arguments.
    99	The special file does not exist or is empty.
Example:
HELPTEXT
    printf '%q %s\n' "$(basename "$1")" '--bare -l 5 -s STOP --append-on-failure -- wget {}'
}

timeToSeconds()
{
    case "$1" in
	+([0-9])?(s))   time="${1%s}";;
	+([0-9])m)	time=$((${1%m} * 60));;
	+([0-9])h)	time=$((${1%h} * 3600));;
	+([0-9])d)	time=$((${1%d} * 86400));;
	*)		printf >&2 "ERROR: Illegal ${2:-timeout}: %s\\n" "$1"; exit 2;;
    esac
    printf %s "$time"
}

typeset -a bagArgs=()
isParallel=
count=1
maxLines=1
stopPattern=
rateLimit=
exitOn=
exitComparison=-eq
prependOn=
prependComparison=-eq
prependBeforeText=
prependAfterText=
appendBeforeText=
appendAfterText=
appendOn=
appendComparison=-eq
typeset -a commands=()
prefixCommand=
prefixCommandCommand=
isPrint=
isBare=
isWorstStatus=
isCaptureOutput=t
typeset -a runWithPromptArgs=()
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;
	--transactional|-t)
			bagArgs+=("$1"); shift;;
	--exit-on-success)	shift; exitOn=0; exitComparison=-eq;;
	--exit-on-failure)	shift; exitOn=0; exitComparison=-ne;;
	--exit-on)		shift; exitOn="$1"; shift; exitComparison=-eq;;
	--exit-unless)		shift; exitOn="$1"; shift; exitComparison=-ne;;
	--prepend-on-failure)	shift; prependOn=0; prependComparison=-ne;;
	--prepend-on)		shift; prependOn="$1"; shift; prependComparison=-eq;;
	--prepend-unless)	shift; prependOn="$1"; shift; prependComparison=-ne;;
	--prepend-before)	shift; prependBeforeText="$1"; shift;;
	--prepend-after)	shift; prependAfterText="$1"; shift;;
	--append-on-failure)	shift; appendOn=0; appendComparison=-ne;;
	--append-on)		shift; appendOn="$1"; shift; appendComparison=-eq;;
	--append-unless)	shift; appendOn="$1"; shift; appendComparison=-ne;;
	--append-before)	shift; appendBeforeText="$1"; shift;;
	--append-after)		shift; appendAfterText="$1"; shift;;
	--parallel)	shift; isParallel=t;;
	--print)	shift; isPrint=t;;
	--bare)		shift; isBare=t;;
	--trailing-prompt|--no-trailing-prompt|--no-output-no-prompt|--no-output-no-error|--emulate-prompt)
			runWithPromptArgs+=("$1"); shift;;
	--initial-status)
			runWithPromptArgs+=("$1" "$2"); shift; shift;;
	--no-capture-output)
			shift; isCaptureOutput=;;
	--worst-status)	shift; isWorstStatus=t;;
	--command|-c)	shift
			if [ -n "$prefixCommandCommand" ]; then
			    printf -v quotedCommand %q "$1"
			    printf -v escapedOutputMarker %q "$outputMarker" # %q escapes {}, we don't want that to have it interpolated later.
			    commands+=(${commands:+;} "${prefixCommandCommand} --command ${quotedCommand//"$escapedOutputMarker"/$outputMarker}")
			else
			    commands+=(${commands:+;} "${prefixCommand}$1")
			fi
			shift
			;;
	--prefix-command)
			shift; prefixCommand="$1"; shift;;
	--prefix-command-command)
			shift; prefixCommandCommand="$1"; shift;;
	--count|-n)	shift; count="$1"; shift;;
	--all|-a)	shift; count=;;
	--max-lines|-l)	shift; maxLines="$1"; shift;;
	--stop-on|-s)	shift; stopPattern="$1"; shift;;
	--rate-limit)	shift; rateLimit="$1"; shift;;
	--)		shift; break;;
	-*)		{ echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		break;;
    esac
done
if [ $# -ne 0 ]; then
    # Combine --command and SIMPLECOMMAND; need to quote SIMPLECOMMAND to
    # undo the effects of eval.
    printf -v quotedSimpleCommand '%q ' "$@"
    printf -v escapedOutputMarker %q "$outputMarker"
    commands+=(${commands:+;} "${prefixCommand}${quotedSimpleCommand//"$escapedOutputMarker"/$outputMarker}")	# %q escapes {}, we don't want that to have it interpolated later.
fi
if [ ! "$isPrint" ] && [ ${#commands[@]} -eq 0 ]; then
    echo 'ERROR: Need to pass either --print to show lines, or -c|--command to execute a command.'
    echo
    printUsage "$0"
    exit 2
fi >&2

# Don't show a prompt if nothing was printed; this would just waste screen
# space. Parallel execution is supposedly mostly used to control resource usage
# (e.g. just one instance via singleton or not too frequent actions via
# oncePer). In that case, ignore failing invocations altogether.
if [ ${#runWithPromptArgs[@]} -eq 0 ]; then
    [ "$isCaptureOutput" ] && runWithPromptArgs+=(--no-output-no-prompt)
    if [ "$isParallel" ]; then
	[ "$isCaptureOutput" ] && runWithPromptArgs+=(--no-output-no-error)
	runWithPromptArgs+=(--no-count-on 99)
    fi
fi


exitStatus=0
overallExitStatus=
let totalCnt=0
consumeExistingOutput()
{
    while [ -z "$count" ] || [ $totalCnt -lt $count ]
    do
	processBag || break
	: ${overallExitStatus:=0}
    done
    wait; return ${overallExitStatus:-99}
}

processBag()
{
    typeset -a lines=()
    readarray -t lines < <(bag "${bagArgs[@]}" --pop --quiet --lines "$maxLines")
    [ ${#lines[@]} -eq 0 ] && return 1

    executeTrigger "${lines[@]}"
}

executeTrigger()
{
    typeset -a lines=("$@")
    local status=0
    if [ -n "$stopPattern" ]; then
	local line lineCnt=0
	for line in "${lines[@]}"
	do
	    let lineCnt+=1
	    if [[ "$line" =~ $stopPattern ]]; then
		# Optimization when no --max-lines configured.
		[ ${#lines[@]} -eq 1 ] && return 1

		# Need to process any previous read lines, and put back lines
		# after the stop line. Do the latter first.
		[ $lineCnt -lt ${#lines[@]} ] && bag "${bagArgs[@]}" --prepend -- "${lines[@]}"
		if [ $lineCnt -eq 1 ]; then
		    return 1
		else
		    lines=("${lines[@]:0:$((lineCnt-1))}")
		    status=1
		fi
		break
	    fi
	done
    fi


    if [ "$isPrint" ]; then
	joinBy ${BAGCONSUME_PRINT_PREFIX:+--prefix "$BAGCONSUME_PRINT_PREFIX"} ${BAGCONSUME_PRINT_SUFFIX:+--suffix "$BAGCONSUME_PRINT_SUFFIX"} -- "${BAGCONSUME_PRINT_SEPARATOR-$'\n'}" "${lines[@]}"
    fi

    if [ ${#commands[@]} -ge 1 ]; then
	[ "$rateLimit" ] && sleep "$rateLimit"
	eval 'triggerCommand "${lines[@]}"' ${isParallel:+&}
	status=$?
    fi

    let totalCnt+=1
    return $status
}

triggerCommand()
{
    if [ "${commands[*]}" = "eval $outputMarker" ]; then
	# Optimization: Detect (non-bare) command from bag-execute and drop the
	# eval so that the command looks natural in runWithPrompt.
	typeset -a expandedCommands=("$@")
    else
	local quotedLines; printf -v quotedLines '%q ' "$@"; quotedLines=${quotedLines% }
	typeset -a expandedCommands=("${commands[@]//"$outputMarker"/$quotedLines}")
    fi

    unset BAGCONSUME_OUTPUT_MARKER
    if [ "$isBare" ]; then
	eval "${expandedCommands[@]}"
    else
	{ printf '%s ' "${expandedCommands[@]}"; printf '\n'; } | runWithPrompt --initial-status "${exitStatus:-0}" --no-trailing-prompt "${runWithPromptArgs[@]}" --comment "$totalCnt"
    fi
    exitStatus=$?
    if [ ! "$isWorstStatus" -o $exitStatus -gt ${overallExitStatus:-0} ]; then
	overallExitStatus=$exitStatus
    fi
    if [ "$prependOn" ] && [ $exitStatus $prependComparison $prependOn ]; then
	[ -n "$prependAfterText" ] && bag "${bagArgs[@]}" --prepend -- "$prependAfterText"
	printf '%s\n' "$@" | bag "${bagArgs[@]}" --prepend
	[ -n "$prependBeforeText" ] && bag "${bagArgs[@]}" --prepend -- "$prependBeforeText"
    fi
    if [ "$appendOn" ] && [ $exitStatus $appendComparison $appendOn ]; then
	[ -n "$appendBeforeText" ] && bag "${bagArgs[@]}" --append -- "$appendBeforeText"
	printf '%s\n' "$@" | bag "${bagArgs[@]}" --append
	[ -n "$appendAfterText" ] && bag "${bagArgs[@]}" --append -- "$appendAfterText"
    fi
    if [ "$exitOn" ] && [ $exitStatus $exitComparison $exitOn ]; then
	[ "$isParallel" ] && kill -SIGUSR1 $$
	exit $exitStatus
    fi
}


# With parallel execution, we need a signal for stopping; a variable won't do.
# Each COMMAND is started as a separate job, and its exit status (that indicates
# whether we should stop) is not observed by the main script. Instead, that job
# sends SIGUSR1 to the main script, which waits for any other running jobs, and
# then terminates.
shutdown()
{
    wait    # Wait for running jobs to finish; this avoids the "Terminated" message and exit status 143.
    exit 0
}
trap "shutdown" SIGUSR1

if [ -n "$pgid" ]; then
    trap "kill -- -$pgid" EXIT  # If we're the leader, kill subshell processes when the script exits.
else
    trap "jobs -p | xargs --no-run-if-empty kill --" EXIT  # Someone else is the leader; killing remaining jobs is all we can do here.
fi

consumeExistingOutput
